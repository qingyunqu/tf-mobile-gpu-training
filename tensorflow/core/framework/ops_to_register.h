// This file was autogenerated by print_selective_registration_header.py
#ifndef OPS_TO_REGISTER
#define OPS_TO_REGISTER

    namespace {
      constexpr const char* skip(const char* x) {
        return (*x) ? (*x == ' ' ? skip(x + 1) : x) : x;
      }

      constexpr bool isequal(const char* x, const char* y) {
        return (*skip(x) && *skip(y))
                   ? (*skip(x) == *skip(y) && isequal(skip(x) + 1, skip(y) + 1))
                   : (!*skip(x) && !*skip(y));
      }

      template<int N>
      struct find_in {
        static constexpr bool f(const char* x, const char* const y[N]) {
          return isequal(x, y[0]) || find_in<N - 1>::f(x, y + 1);
        }
      };

      template<>
      struct find_in<0> {
        static constexpr bool f(const char* x, const char* const y[]) {
          return false;
        }
      };
    }  // end namespace
    constexpr const char* kNecessaryOpKernelClasses[] = {
"BinaryOp<CPUDevice, functor::add<float>>",
"ApplyGradientDescentOp<CPUDevice, float>",
"AssignOpT<CPUDevice, ::tensorflow::int64>",
"AssignOpT<CPUDevice, float>",
"DenseUpdateOp<CPUDevice, ::tensorflow::int64, DenseUpdateType::ADD>",
"BiasOp<CPUDevice, float>",
"BCastGradArgsOp<int32>",
"ConcatV2Op<CPUDevice, float>",
"ConstantOp",
"ExpandDimsOp<int32>",
"FillOp<CPUDevice, float, int32>",
"UnaryOp<CPUDevice, functor::floor<float>>",
"GatherOp<CPUDevice, float, int32>",
"IdentityOp",
"L2LossOp<CPUDevice, float>",
"MatMulOp<CPUDevice, float, false >",
"BinaryOp<CPUDevice, functor::minimum<float>>",
"BinaryOp<CPUDevice, functor::mul<float>>",
"NoOp",
"PackOp<CPUDevice, float>",
"PlaceholderOp",
"IdentityOp",
"IdentityOp",
"PhiloxRandomOp<CPUDevice, random::UniformDistribution< random::PhiloxRandom, float>>",
"BinaryOp<CPUDevice, functor::div<float>>",
"ReshapeOp",
"RestoreV2",
"SaveV2",
"ShapeOp<int32>",
"UnaryOp<CPUDevice, functor::sigmoid<float>>",
"SizeOp<int32>",
"SoftmaxOp<CPUDevice, float>",
"SparseSoftmaxXentWithLogitsOp<CPUDevice, float, int32>",
"SplitOpCPU<float>",
"UnaryOp<CPUDevice, functor::sqrt<float>>",
"StridedSliceOp<CPUDevice, float>",
"BinaryOp<CPUDevice, functor::sub<float>>",
"ReductionOp<CPUDevice, float, int32, Eigen::internal::SumReducer<float>>",
"UnaryOp<CPUDevice, functor::tanh<float>>",
"TileOp<CPUDevice, int32>",
"TopK<CPUDevice, float>",
"UnpackOp<CPUDevice, float>",
"VariableOp",
"ZerosLikeOp<CPUDevice, float>",
"RecvOp",
"SendOp",
};
#define SHOULD_REGISTER_OP_KERNEL(clz) (find_in<sizeof(kNecessaryOpKernelClasses) / sizeof(*kNecessaryOpKernelClasses)>::f(clz, kNecessaryOpKernelClasses))

constexpr inline bool ShouldRegisterOp(const char op[]) {
  return false
     || isequal(op, "Add")
     || isequal(op, "AddN")
     || isequal(op, "ApplyGradientDescent")
     || isequal(op, "Assign")
     || isequal(op, "AssignAdd")
     || isequal(op, "BiasAdd")
     || isequal(op, "BiasAddGrad")
     || isequal(op, "BroadcastGradientArgs")
     || isequal(op, "Cast")
     || isequal(op, "ConcatOffset")
     || isequal(op, "ConcatV2")
     || isequal(op, "Const")
     || isequal(op, "ExpandDims")
     || isequal(op, "Fill")
     || isequal(op, "Floor")
     || isequal(op, "FloorMod")
     || isequal(op, "ConcatOffset")
     || isequal(op, "Gather")
     || isequal(op, "Identity")
     || isequal(op, "L2Loss")
     || isequal(op, "MatMul")
     || isequal(op, "Minimum")
     || isequal(op, "Mul")
     || isequal(op, "Neg")
     || isequal(op, "NoOp")
     || isequal(op, "Pack")
     || isequal(op, "Placeholder")
     || isequal(op, "PlaceholderWithDefault")
     || isequal(op, "PreventGradient")
     || isequal(op, "RandomUniform")
     || isequal(op, "RealDiv")
     || isequal(op, "Reshape")
     || isequal(op, "RestoreV2")
     || isequal(op, "SaveV2")
     || isequal(op, "ScalarSummary")
     || isequal(op, "ScatterSub")
     || isequal(op, "Shape")
     || isequal(op, "Sigmoid")
     || isequal(op, "SigmoidGrad")
     || isequal(op, "Size")
     || isequal(op, "Softmax")
     || isequal(op, "SparseSoftmaxCrossEntropyWithLogits")
     || isequal(op, "Split")
     || isequal(op, "SplitV")
     || isequal(op, "Sqrt")
     || isequal(op, "Squeeze")
     || isequal(op, "StridedSlice")
     || isequal(op, "Slice")
     || isequal(op, "TanhGrad")
     || isequal(op, "Sub")
     || isequal(op, "Sum")
     || isequal(op, "Tanh")
     || isequal(op, "Tile")
     || isequal(op, "TopKV2")
     || isequal(op, "Unpack")
     || isequal(op, "VariableV2")
     || isequal(op, "ZerosLike")
     || isequal(op, "_Recv")
     || isequal(op, "_Send")
  ;
}
#define SHOULD_REGISTER_OP(op) ShouldRegisterOp(op)

#define SHOULD_REGISTER_OP_GRADIENT true
#endif
